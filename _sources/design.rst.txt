ðŸ—’ Design Document
==================

Motivation
----------
`Unifying tooling <https://exasol.github.io/python-styleguide/guides/tooling.html>`_ is just a the first step
when it comes to reducing cognitive and administrative overhead for maintaining and working on projects.
As a natural next step, common tasks and the maintenance of those tasks, executed by this tooling (e.g. CI/CD)
should be simplified. Harmonizing entry points and targets provides a good fundament to do so.
This project to serve as example and as provider for this kind of simplification.

Overview
---------
This project mainly serves three main purposes:

    #. Provide library code, scripts and commands for common tasks within an python project's
    #. Provide and maintain commonly required functionality for python project's
        * Common Projects Tasks
            - apply code formatters
            - lint project
            - type check project
            - run unit tests
            - run integration tests
            - determine code coverage
            - build-, open-, clean- documentation
        * CI (verify PR's and merges)
        * CI/CD (verify and publish releases)
        * Build & Publish Documentation (verify and publish documentation)
        * Provide and enforce configuration settings (code formatter & co.)
    #. Provide usage examples of the common functionality


Design Principles
-----------------
* Convention over configuration
* Provide extension points (hooks) where project specific adjustments needed
    - worst case overwrite existing targets
* YAGNI add features and extension point when they are needed
* Provide common build and developer expirience to reduce cognitive overhead when switching projects
    - common tools
    - common tasks
* Documentation related stuff should be handled by sphinx + sphinx extensions ...
* Workflows (CI/CD) should only contain infrastructure
    - just orchestrate workflow specific things
    - prepare execution environment
    - use/run nox targets

Design
------

TBD: diagram: configuration and tasks (noxfile.py + noxconfig.py + exasol.toolbox)
TBD: diagram: github workflows and interaction

Design Decisions
++++++++++++++++
* what ever can be configured in the pyproject.toml should be configured in it not in noxconfig.py
* tools in use, e.g. nox
* Workflows
* Nox because team already familiar with and dev also was quite familiar
    - alternatives
* try not to depend on and trigger other nox tasks


Known Issues
++++++++++++
* nox tasks only run once

Steps
+++++
* integrating and learn by integrating into projects
* single docs
* multiverse documentation
* first step generators
* second step tools for sync/update
* when sync tools are in place, sync/update workflow can be added



Future & Outlook
-------------------
* Migration to Setting Type provided by lib
    - Settings class can provide properties and show deprecation warnings if option changes ..
* Provide an init command Generate and extend configs
